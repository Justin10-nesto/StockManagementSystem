Keep in mind that DOM Level 3 Events deprecates the keypress event, so you can simulate only the
keydown and keyup events using this technique:
var textbox = document.getElementById(“myTextbox”),
 event;

//create event object the DOM Level 3 way
if (document.implementation.hasFeature(“KeyboardEvents”, “3.0”)){
 event = document.createEvent(“KeyboardEvent”);

 //initialize the event object
 event.initKeyboardEvent(“keydown”, true, true, document.defaultView, “a”,
 0, “Shift”, 0);
}
//fire the event
textbox.dispatchEvent(event);
SimulateDOMKeyEventExample01.htm
This example simulates keydown of the A key while Shift is being held. You should always
check for DOM Level 3 keyboard events support before attempting to use document.createEvent
(“KeyboardEvent”); other browsers return a nonstandard KeyboardEvent object.
Firefox allows you to create a keyboard event by passing “KeyEvents” into the createEvent()
method. This returns an event object with a method called initKeyEvent(), which accepts the
following 10 arguments:
type (string) — The type of event to fi re, such as “keydown”.
bubbles (Boolean) — Indicates if the event should bubble. This should be set to true for
accurate mouse event simulation.
cancelable (Boolean) — Indicates if the event can be canceled. This should be set to true
for accurate mouse event simulation.
view (AbstractView) — The view associated with the event. This is almost always
document.defaultView.
ctrlKey (Boolean) — Indicates if the Ctrl key is pressed. The default is false.
altKey (Boolean) — Indicates if the Alt key is pressed. The default is false.
shiftKey (Boolean) — Indicates if the Shift key is pressed. The default is false.
metaKey (Boolean) — Indicates if the Meta key is pressed. The default is false.
keyCode (integer) — The key code of the key that was pressed or released. This is used for
keydown and keyup. The default is 0.
charCode (integer) — The ASCII code of the character generated from the key press. This is
used for keypress. The default is 0.

➤
➤
Available for
download on
Wrox.com
Simulating Events ❘ 505
c13.indd 505 12/8/11 10:37:41 AM
506 ❘
 CHAPTER 13 EVENTS
A keyboard event can then be fi red by passing this event object to dispatchEvent(), as in this example:
//for Firefox only
var textbox = document.getElementById(“myTextbox”);

//create event object
var event = document.createEvent(“KeyEvents”);

//initialize the event object
event.initKeyEvent(“keydown”, true, true, document.defaultView, false, false,
 true, false, 65, 65);

//fire the event
textbox.dispatchEvent(event);
SimulateFFKeyEventExample01.htm
This example simulates keydown for the A key with the Shift key held down. You can also simulate
keyup and keypress events using this technique.
For other browsers, you’ll need to create a generic event and assign keyboard-specifi c information to
it. Here is an example:
var textbox = document.getElementById(“myTextbox”);

//create event object
var event = document.createEvent(“Events”);

//initialize the event object
event.initEvent(type, bubbles, cancelable);
event.view = document.defaultView;
event.altKey = false;
event.ctrlKey = false;
event.shiftKey = false;
event.metaKey = false;
event.keyCode = 65;
event.charCode = 65;

//fire the event
textbox.dispatchEvent(event);
This code creates a generic event, initializes it by using initEvent(), and then assigns keyboard
event information. It’s necessary to use a generic event instead of a UI event because the UI event
prevents new properties from being added to the event object (except in Safari). Simulating an event
in this way causes the keyboard event to fi re, but no text will be placed into the text box because
this doesn’t accurately simulate a keyboard event.
Simulating Other Events
Mouse events and keyboard events are the ones most often simulated in the browser, though it is
possible to simulate mutation and HTML events as well. To simulate a mutation event, use create
Available for
download on
Wrox.com
c13.indd 506 12/8/11 10:37:42 AM
Event(“MutationEvents”) to create a new mutation event object with an initMutationEvent()
method. The arguments of this event are type, bubbles, cancelable, relatedNode, prevValue,
newValue, attrName, and attrChange. Simulating a mutation event takes the following form:
var event = document.createEvent(“MutationEvents”);
event.initMutationEvent(“DOMNodeInserted”, true, false, someNode, “”,””,””,0);
target.dispatchEvent(event);
This code simulates a DOMNodeInserted event. All other mutation events can be simulated using the
same basic code and changing the arguments.
HTML events are simulated by creating an event object, using createEvent(“HTMLEvents”), and
then initializing the event object using initEvent(). Here’s an example:
var event = document.createEvent(“HTMLEvents”);
event.initEvent(“focus”, true, false);
target.dispatchEvent(event);
This example fi res the focus event on a given target. Other HTML events may be simulated the same way.
Mutation events and HTML events are rarely used in browsers because they are of
limited utility.
Custom DOM Events
DOM Level 3 specifi es a class of events called custom events. Custom events don’t get fi red natively
by the DOM but are provided so that developers can create their own events. You create a new
custom event by calling createEvent(“CustomEvent”). The returned object has a method called
initCustomEvent(), which takes four arguments:
type (string) — The type of event to fi re, such as “keydown”.
bubbles (Boolean) — Indicates if the event should bubble.
cancelable (Boolean) — Indicates if the event can be canceled.
detail (object) — Any value. This fi lls in the detail property of the event object.
The created event can then be dispatched in the DOM just like any other event. For example:
var div = document.getElementById(“myDiv”),
 event;
EventUtil.addHandler(div, “myevent”, function(event){
 alert(“DIV: “ + event.detail);
});
EventUtil.addHandler(document, “myevent”, function(event){
 alert(“DOCUMENT: “ + event.detail);
});
if (document.implementation.hasFeature(“CustomEvents”, “3.0”)){
➤
➤
➤
➤
Available for
download on
Wrox.com
Simulating Events ❘ 507
c13.indd 507 12/8/11 10:37:42 AM
508 ❘
 CHAPTER 13 EVENTS
 event = document.createEvent(“CustomEvent”);
 event.initCustomEvent(“myevent”, true, false, “Hello world!”);
 div.dispatchEvent(event);
}
SimulateDOMCustomEventExample01.htm
This example creates a bubbling event called “myevent”. The value of event.detail is set to a
simple string and is then listened for both on a <div> element and at the document level. Because
the event is specifi ed as bubbling using initCustomEvent(), the browser takes care of bubbling the
event up to the document.
Custom DOM events are supported only in Internet Explorer 9+ and Firefox 6+.
Internet Explorer Event Simulation
Event simulation in Internet Explorer 8 and earlier follows a similar pattern as event simulation in
the DOM: you create an event object, assign the appropriate information, and then fi re the event
using the object. Of course, Internet Explorer has different ways of doing each step.
The createEventObject() method of document creates an event object. Unlike the DOM, this
method accepts no arguments and returns a generic event object. After that, you must manually
assign all of the properties that you want to have on the object. (There is no method to do this.) The
last step is to call fireEvent() on the target, which accepts two arguments: the name of the event
handler and the event object. When fireEvent() is called, the srcElement and type properties
are automatically assigned to the event object; all other properties must be manually assigned. This
means that all events that Internet Explorer supports are simulated using the same algorithm. For
example, the following fi res a click event on a button:
var btn = document.getElementById(“myBtn”);

//create event object
var event = document.createEventObject();

//initialize the event object
event.screenX = 100;
event.screenY = 0;
event.clientX = 0;
event.clientY = 0;
event.ctrlKey = false;
event.altKey = false;
event.shiftKey = false;
event.button = 0;

//fire the event
btn.fireEvent(“onclick”, event);
SimulateIEClickExample01.htm
This example creates an event object and then initializes it with some information. Note that
property assignment is free-form, so you can assign any properties you’d like, including those not
Available for
download on
Wrox.com
c13.indd 508 12/8/11 10:37:43 AM
normally supported by Internet Explorer 8 and earlier. The property values are of no consequence to
the event, because only event handlers use them.
The same algorithm can be used to fi re a keypress event as well, as shown in this example:
var textbox = document.getElementById(“myTextbox”);

//create event object
var event = document.createEventObject();

//initialize the event object
event.altKey = false;
event.ctrlKey = false;
event.shiftKey = false;
event.keyCode = 65;

//fire the event
textbox.fireEvent(“onkeypress”, event);
SimulateIEKeyEventExample01.htm
Since there is no difference between event objects for mouse, keyboard, or other events, a generic
event object can be used to fi re any type of event. Note that, as with DOM keyboard event
simulation, no characters will appear in a text box as the result of a simulated keypress event even
though the event handler will fi re.
SUMMARY
Events are the primary way that JavaScript is tied to web pages. Most common events are defi ned in
the DOM Level 3 Events specifi cation or in HTML5. Even though there is a specifi cation for basic
events, many browsers have gone beyond the specifi cation and implemented proprietary events to
give developers greater insight into user interactions. Some proprietary events are directly related to
specifi c devices, such as the mobile Safari orientationchange event that is specifi c to iOS devices.
There are some memory and performance considerations surrounding events. For example:
It’s best to limit the number of event handlers on a page, since they can take up more
memory and make the page feel less responsive to the user.
Event delegation can be used to limit the number of event handlers by taking advantage of
event bubbling.
It’s a good idea to remove all event handlers that were added before the page is unloaded.
It’s possible to simulate events in the browser using JavaScript. The DOM Level 2 and 3 Events
specifi cations provide for the simulation of all events, making it easy to simulate all defi ned events.
It’s also possible to simulate keyboard events to a point by using a combination of other techniques.
Internet Explorer 8 and earlier also support event simulation, albeit through a different interface.
Events are one of the most important topics in JavaScript, and a good understanding of how they
work and their performance implications is critical.

Scripting Forms
WHAT’S IN THIS CHAPTER?
Understanding form basics
Text box validation and interaction
Working with other form controls
One of the original uses of JavaScript was to offl oad some form-processing responsibilities
onto the browser instead of relying on the server to do it all. Although the Web and JavaScript
have evolved since that time, web forms remain more or less unchanged. The failure of
web forms to provide out-of-the-box solutions for common problems led developers to use
JavaScript not just for form validation but also to augment the default behavior of standard
form controls.
FORM BASICS
Web forms are represented by the <form> element in HTML and by the HTMLFormElement
type in JavaScript. The HTMLFormElement type inherits from HTMLElement and therefore has
all of the same default properties as other HTML elements. However, HTMLFormElement also
has the following additional properties and methods:
acceptCharset — The character sets that the server can process; equivalent to the
HTML accept-charset attribute.
action — The URL to send the request to; equivalent to the HTML action attribute.
elements — An HTMLCollection of all controls in the form.
enctype — The encoding type of the request; equivalent to the HTML enctype attribute.
length — The number of controls in the form.

 CHAPTER 14 SCRIPTING FORMS
method — The type of HTTP request to send, typically “get” or “post”; equivalent to the
HTML method attribute.
name — The name of the form; equivalent to the HTML name attribute.
reset() — Resets all form fi elds to their default values.
submit() — Submits the form.
target — The name of the window to use for sending the request and receiving the
response; equivalent to the HTML target attribute.
References to <form> elements can be retrieved in a number of different ways. The most common
way is to treat them as any other elements and assign the id attribute, allowing the use of
getElementById(), as in the following example:
var form = document.getElementById(“form1”);
All forms on the page can also be retrieved from document.forms collection. Each form can be
accessed in this collection by numeric index and by name, as shown in the following examples:
var firstForm = document.forms[0]; //get the first form in the page
var myForm = document.forms[“form2”]; //get the form with a name of “form2”
Older browsers, or those with strict backwards compatibility, also add each form with a name as
a property of the document object. For instance, a form named “form2” could be accessed via
document.form2. This approach is not recommended, because it is error-prone and may be removed
from browsers in the future.
Note that forms can have both an id and a name and that these values need not be the same.
Submitting Forms
Forms are submitted when a user interacts with a submit button or an image button. Submit
buttons are defi ned using either the <input> element or the <button> element with a type attribute
of “submit“, and image buttons are defi ned using the <input> element with a type attribute of
“image“. All of the following, when clicked, will submit a form in which the button resides:
<!-- generic submit button -->
<input type=”submit” value=”Submit Form”>

<!-- custom submit button -->
<button type=”submit”>Submit Form</button>

<!-- image button -->
<input type=”image” src=”graphic.gif”>
If any one of these types of buttons is within a form that has a submit button, pressing Enter on the
keyboard while a form control has focus will also submit the form. (The one exception is a textarea,
within which Enter creates a new line of text.) Note that forms without a submit button will not be
submitted when Enter is pressed.
➤
➤
➤
➤
➤
c14.indd 512 12/8/11 10:38:32 AM
When a form is submitted in this manner, the submit event fi res right before the request is sent to
the server. This gives you the opportunity to validate the form data and decide whether to allow the
form submission to occur. Preventing the event’s default behavior cancels the form submission. For
example, the following prevents a form from being submitted:
var form = document.getElementById(“myForm”);
EventUtil.addHandler(form, ”submit”, function(event){

 //get event object
 event = EventUtil.getEvent(event);

 //prevent form submission
 EventUtil.preventDefault(event);
});
This code uses the EventUtil object from the previous chapter to provide cross-browser event
handling. The preventDefault() method stops the form from being submitted. Typically, this
functionality is used when data in the form is invalid and should not be sent to the server.
It’s possible to submit a form programmatically by calling the submit() method from JavaScript.
This method can be called at any time to submit a form and does not require a submit button to be
present in the form to function appropriately. Here’s an example:
var form = document.getElementById(“myForm”);

//submit the form
form.submit();
When a form is submitted via submit(), the submit event does not fi re, so be sure to do data
validation before calling the method.
One of the biggest issues with form submission is the possibility of submitting the form twice.
Users sometimes get impatient when it seems like nothing is happening and may click a submit
button multiple times. The results can be annoying (because the server processes duplicate requests)
or damaging (if the user is attempting a purchase and ends up placing multiple orders). There are
essentially two ways to solve this problem: disable the submit button once the form is submitted, or
use the onsubmit event handler to cancel any further form submissions.
Resetting Forms
Forms are reset when the user clicks a reset button. Reset buttons are created using either the
<input> or the <button> element with a type attribute of “reset“, as in these examples:
<!-- generic reset button -->
<input type=”reset” value=”Reset Form”>

<!-- custom reset button -->
<button type=”reset”>Reset Form</button>
Form Basics ❘
 513
c14.indd 513 12/8/11 10:38:33 AM
514 ❘
 CHAPTER 14 SCRIPTING FORMS
Either of these buttons will reset a form. When a form is reset, all of the form fi elds are set back
to the values they had when the page was fi rst rendered. If a fi eld was originally blank, it becomes
blank again, whereas a fi eld with a default value reverts to that value.
When a form is reset by the user clicking a reset button, the reset event fi res. This event gives
you the opportunity to cancel the reset if necessary. For example, the following prevents a form
from being reset:
var form = document.getElementById(“myForm”);
EventUtil.addHandler(form, ”reset”, function(event){

 //get event object
 event = EventUtil.getEvent(event);

 //prevent form reset
 EventUtil.preventDefault(event);
});
As with form submission, resetting a form can be accomplished via JavaScript using the reset()
method, as in this example:
var form = document.getElementById(“myForm”);

//reset the form
form.reset();
Unlike the submit() method’s functionality, reset() fi res the reset event the same as if a reset
button were clicked.
Form resetting is typically a frowned-upon approach to web form design. It’s often
disorienting to the user and, when triggered accidentally, can be quite frustrating.
There’s almost never a need to reset a form. It’s often enough to provide a cancel
button that takes the user back to the previous page rather than explicitly to revert
all values in the form.
Form Fields
Form elements can be accessed in the same ways as any other elements on the page using native
DOM methods. Additionally, all form elements are parts of an elements collection that is a
property of each form. The elements collection is an ordered list of references to all form fi elds in
the form and includes all <input>, <textarea>, <button>, <select>, and <fieldset> elements.
Each form fi eld appears in the elements collection in the order in which it appears in the markup,
indexed by both position and name. Here are some examples:
c14.indd 514 12/8/11 10:38:33 AM
var form = document.getElementById(“form1”);

//get the first field in the form
var field1 = form.elements[0];

//get the field named ”textbox1”
var field2 = form.elements[”textbox1”];

//get the number of fields
var fieldCount = form.elements.length;
If a name is in use by multiple form controls, as is the case with radio buttons, then an HTMLCollection
is returned containing all of the elements with the name. For example, consider the following HTML
snippet:
<form method=”post” id=”myForm”>
 <ul>
 <li><input type=”radio” name=”color” value=”red”>Red</li>
 <li><input type=”radio” name=”color” value=”green”>Green</li>
 <li><input type=”radio” name=”color” value=”blue”>Blue</li>
 </ul>
</form>
FormFieldsExample01.htm
The form in this HTML has three radio controls that have “color” as their name, which ties the fi elds
together. When accessing elements[“color”], a NodeList is returned, containing all three elements;
when accessing elements[0], however, only the fi rst element is returned. Consider this example:
var form = document.getElementById(“myForm”);

var colorFields = form.elements[“color”];
alert(colorFields.length); //3

var firstColorField = colorFields[0];
var firstFormField = form.elements[0];
alert(firstColorField === firstFormField); //true
FormFieldsExample01.htm
This code shows that the fi rst form fi eld, accessed via form.elements[0], is the same as the fi rst
element contained in form.elements[“color”].
It’s possible to access elements as properties of a form as well, such as form[0]
to get the fi rst form fi eld and form[“color”] to get a named fi eld. These
properties always return the same thing as their equivalent in the elements
collection. This approach is provided for backwards compatibility with older
browsers and should be avoided when possible in favor of using elements.
Form Basics ❘ 515
c14.indd 515 12/8/11 10:38:43 AM
516 ❘
 CHAPTER 14 SCRIPTING FORMS
Common Form-Field Properties
With the exception of the <fieldset> element, all form fi elds share a common set of properties.
Since the <input> type represents many form fi elds, some properties are used only with certain fi eld
types, whereas others are used regardless of the fi eld type. The common form-fi eld properties and
methods are as follows:
disabled — A Boolean indicating if the fi eld is disabled.
form — A pointer to the form that the fi eld belongs to. This property is read only.
name — The name of the fi eld.
readOnly — A Boolean indicating if the fi eld is read only.
tabIndex — Indicates the tab order for the fi eld.
type — The type of the fi eld: “checkbox”, “radio”, and so on.
value — The value of the fi eld that will be submitted to the server. For fi le-input fi elds, this
property is read only and simply contains the fi le’s path on the computer.
With the exception of the form property, JavaScript can change all other properties dynamically.
Consider this example:
var form = document.getElementById(“myForm”);
var field = form.elements[0];

//change the value
field.value = ”Another value”;

//check the value of form
alert(field.form === form); //true

//set focus to the field
field.focus();

//disable the field
field.disabled = true;

//change the type of field (not recommended, but possible for <input>)
field.type = ”checkbox”;
The ability to change form-fi eld properties dynamically allows you to change the form at any time
and in almost any way. For example, a common problem with web forms is users’ tendency to click
the submit button twice. This is a major problem when credit-card orders are involved, because it
may result in duplicate charges. A very common solution to this problem is to disable the submit
button once it’s been clicked, which is possible by listening for the submit event and disabling the
submit button when it occurs. The following code accomplishes this:
//Code to prevent multiple form submissions
EventUtil.addHandler(form, “submit”, function(event){
 event = EventUtil.getEvent(event);
